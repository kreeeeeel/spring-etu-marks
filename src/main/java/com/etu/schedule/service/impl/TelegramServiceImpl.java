package com.etu.schedule.service.impl;

import com.etu.schedule.entity.GroupEntity;
import com.etu.schedule.entity.UserEntity;
import com.etu.schedule.entry.LessonDayEntry;
import com.etu.schedule.entry.LessonEntry;
import com.etu.schedule.entry.ScheduleEntry;
import com.etu.schedule.repository.GroupRepository;
import com.etu.schedule.repository.UserRepository;
import com.etu.schedule.service.ScheduleService;
import com.etu.schedule.service.TelegramService;
import com.etu.schedule.telegram.util.ScheduleUtil;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.tuple.Pair;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;

import java.util.List;

@Slf4j
@Service
@RequiredArgsConstructor
public class TelegramServiceImpl implements TelegramService {

    @Value("${bot.username}")
    private String username;

    private final ScheduleService scheduleService;
    private final UserRepository userRepository;
    private final GroupRepository groupRepository;

    public static final List<String> TIME = List.of("08:00", "09:50", "11:40", "13:40", "15:30", "17:20", "19:05", "20:50");
    public static final List<String> DAY = List.of("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞");

    public Pair<String, Boolean> isValidGroup(String group) {
        if (group.isEmpty()) {
            return Pair.of("""
                    \uD83D\uDE3F –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã..
                    –§–æ—Ä–º–∞—Ç: /group –Ω–æ–º–µ—Ä
                    """, false);
        }

        if (group.length() != 4)
            return Pair.of("\uD83D\uDE3F –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã..", false);

        if (scheduleService.isExistGroup(group))
            return Pair.of("\uD83D\uDE3F –¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç..", false);

        return Pair.of(null, true);
    }

    public String setGroup(String group, Long userId, Long chatId) {
        if (!userId.equals(chatId)) {

            GroupEntity groupEntity = groupRepository.findByTelegramId(chatId)
                    .orElse(GroupEntity.builder().telegramId(chatId).build());

            groupEntity.setGroupEtu(group);
            groupRepository.save(groupEntity);

            return "\uD83D\uDE03 –í —á–∞—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ " + group + " –≥—Ä—É–ø–ø–∞.";
        }

        UserEntity userEntity = userRepository.findByTelegramId(userId)
                .orElse(UserEntity.builder().telegramId(userId).build());

        userRepository.save(userEntity);
        return "\uD83D\uDE03 –í—ã –≤—ã–±—Ä–∞–ª–∏ " + group + " –≥—Ä—É–ø–ø—É.";
    }

    public Pair<String, Boolean> isValidGroup(String group, Long userId, Long chatId) {

        if (group.isEmpty()) {

            if (!chatId.equals(userId) && !groupRepository.existsByTelegramIdAndGroupEtuIsNotNull(chatId)){
                return Pair.of("""
                        \uD83D\uDE3F –í —á–∞—Ç–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞!
                        
                        –£–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—É: /group –Ω–æ–º–µ—Ä
                        """, false);
            }

            if (chatId.equals(userId) && !userRepository.existsByTelegramIdAndGroupScheduleIsNotNull(userId)) {
                return Pair.of("""
                        \uD83D\uDE3F –£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø—ã
                        –£–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—É: /group –Ω–æ–º–µ—Ä>
                        """, false);
            }
        }
        if (!group.isEmpty()) {
            if (group.length() != 4)
                return Pair.of("\uD83D\uDE3F –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã..", false);

            if (scheduleService.isExistGroup(group))
                return Pair.of("\uD83D\uDE3F –¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç..", false);
        }
        return Pair.of(null, true);

    }

    public String getPair(String group, Long userId, Long chatId, boolean next) {

        group = getGroup(group, userId, chatId);
        LessonEntry lessonCurrent = scheduleService.getLessonCurrent(group, next);
        if (lessonCurrent == null){
            return "\uD83E\uDD73 " + (next ? "–°–ª–µ–¥—É—é—â–µ–π –ø–∞—Ä—ã –Ω–µ—Ç—É, —Ä–∞—Å—Å–ª–∞–±—å—Å—è" : "–°–µ–π—á–∞—Å –Ω–µ—Ç –ø–∞—Ä—ã, —á–∏–ª");
        }

        return String.format("""
                üìå %s –ø–∞—Ä–∞:
                
                %s - %s (%s)%s%s
                """,
                next ? "–°–ª–µ–¥—É—é—â–∞—è" : "–¢–µ–∫—É—â–∞—è",
                TIME.get(lessonCurrent.getPair()),
                lessonCurrent.getShortName(),
                lessonCurrent.getType(),
                lessonCurrent.getAuditorium() != null ? " –∞—É–¥." + lessonCurrent.getAuditorium() : "",
                lessonCurrent.getTeacher() != null ? System.lineSeparator() + " - " + lessonCurrent.getTeacher() : ""
        );
    }

    @Override
    public String changeNote(Long userId) {
        UserEntity userEntity = userRepository.findByTelegramId(userId)
                .orElse(UserEntity.builder().telegramId(userId).build());

        if (userEntity.getEmail() == null || userEntity.getPassword() == null){
            return "‚ùå –í—ã –Ω–µ –±—ã–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! /auth";
        }

        userEntity.setNote(!userEntity.isNote());
        userRepository.save(userEntity);
        return userEntity.isNote() ? "\uD83D\uDE00 –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç —Ö–æ–¥–∏—Ç—å –∏ –æ—Ç–º–µ—á–∞—Ç—å—Å—è –∑–∞ –≤–∞—Å!" : "\uD83D\uDE2C –ë–æ—Ç –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –∑–∞ –≤–∞—Å –æ—Ç–º–µ—á–∞—Ç—å—Å—è..";
    }

    @Override
    public String changeNotify(Long chatId) {
        GroupEntity groupEntity = groupRepository.findByTelegramId(chatId)
                .orElse(GroupEntity.builder().telegramId(chatId).build());

        groupEntity.setNotify(!groupEntity.isNotify());
        groupRepository.save(groupEntity);
        return groupEntity.isNotify() ? """
                \uD83D\uDCD2 –í –±–µ—Å–µ–¥–µ –≤–∫–ª—é—á–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏!
                –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 06:00 –≤ –±–µ—Å–µ–¥—É –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.""" : "\uD83D\uDCD2 –í –±–µ—Å–µ–¥–µ –±—ã–ª–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.";
    }

    @Override
    public InlineKeyboardMarkup getInlineMarkupNote(Long userId) {
        return null;
    }

    public String getScheduleWeek(String group, Long userId, Long chatId, boolean next) {

        group = getGroup(group, userId, chatId);
        ScheduleEntry scheduleEntry = scheduleService.getLessonWeek(group, next);

        StringBuilder stringBuilder = new StringBuilder(String.format("""
                \uD83D\uDCDA %s
                –ì—Ä—É–ø–ø–∞: %s
                """,
                (scheduleEntry.getWeek() == 2 ? "–ß—ë—Ç–Ω–∞—è " : "–ù–µ—á—ë—Ç–Ω–∞—è ") + "–Ω–µ–¥–µ–ª—è",
                scheduleEntry.getGroup()
        ));

        scheduleEntry.getEntry().forEach(it -> {
            stringBuilder.append(String.format("""
                    
                    üìå %s
                    """, DAY.get(it.getDay())));

            it.getLesson().forEach(th -> stringBuilder.append(ScheduleUtil.getLessonMessage(th)).append(System.lineSeparator()));
        });
        return stringBuilder.toString();
    }

    public String getScheduleDay(String group, Long userId, Long chatId, boolean next) {

        group = getGroup(group, userId, chatId);
        LessonDayEntry lessonDay = scheduleService.getLessonDay(group, next);
        if (lessonDay == null){
            return "üìå " + (next ? "–ó–∞–≤—Ç—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–π." : "–°–µ–≥–æ–¥–Ω—è –æ—Ç–¥—ã—Ö–∞–µ–º");
        }

        StringBuilder stringBuilder = new StringBuilder(String.format("""
                \uD83D\uDCDA –ì—Ä—É–ø–ø–∞: %s
                ‚åõ %s : %s
                
                """,
                group,
                DAY.get(lessonDay.getDay()),
                lessonDay.getWeek() == 2 ? " –ß—ë—Ç–Ω–∞—è" : " –ù–µ—á—ë—Ç–Ω–∞—è"
        ));

        lessonDay.getLesson().forEach(it -> stringBuilder.append(ScheduleUtil.getLessonMessage(it)).append(System.lineSeparator()));
        return stringBuilder.toString();
    }

    @Override
    public String getMessageReplaced(String message) {
        return message.replace("@" + username, "");
    }

    private String getGroup(String group, Long userId, Long chatId){
        if (group.isEmpty()) {
            group = userId.equals(chatId) ? userRepository.getGroupByUser(userId) : groupRepository.getGroupByChat(chatId);
        }
        return group;
    }

}
